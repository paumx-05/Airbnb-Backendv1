import { test, expect } from '@playwright/test';

/**
 * Test de QA mejorado para el flujo de reset de password
 * Usando la metodolog√≠a de testing de Playwright seg√∫n @playwright-test rule
 * 
 * Flow to test: Reset Password Flow (Fixed)
 * Base URL: http://localhost:3000
 * Main endpoint: /forgot-password
 * Test credentials: test@example.com
 * Test data: Token de reset de password real
 */

test.describe('Reset Password Flow - QA Testing (Fixed)', () => {
  const BASE_URL = 'http://localhost:3000';
  const TEST_EMAIL = 'test@example.com';
  const NEW_PASSWORD = 'TestPassword123!';

  test.beforeEach(async ({ page }) => {
    // Limpiar cache y localStorage antes de cada test
    await page.goto(BASE_URL);
    await page.evaluate(() => {
      localStorage.clear();
      sessionStorage.clear();
    });
  });

  test('Main Flow Testing - Reset Password Complete Flow (Fixed)', async ({ page }) => {
    console.log('üîç [QA Test Fixed] Iniciando test del flujo completo de reset de password');
    
    // Paso 1: Navegar a la p√°gina de forgot password
    console.log('üìù [QA Test Fixed] Paso 1: Navegando a /forgot-password');
    await page.goto(`${BASE_URL}/forgot-password`);
    await page.waitForLoadState('networkidle');
    
    // Verificar que la p√°gina carg√≥ correctamente
    await expect(page.locator('h1')).toContainText('¬øOlvidaste tu contrase√±a?');
    console.log('‚úÖ [QA Test Fixed] P√°gina de forgot password cargada correctamente');

    // Paso 2: Llenar el formulario con el email de prueba
    console.log('üìù [QA Test Fixed] Paso 2: Llenando formulario con email de prueba');
    await page.fill('input[name="email"]', TEST_EMAIL);
    await page.click('button[type="submit"]');
    
    // Esperar respuesta del backend
    await page.waitForTimeout(3000);
    console.log('‚úÖ [QA Test Fixed] Formulario enviado');

    // Verificar que se muestra el mensaje de √©xito
    const successMessage = page.locator('text=¬°Email Enviado!');
    await expect(successMessage).toBeVisible({ timeout: 10000 });
    console.log('‚úÖ [QA Test Fixed] Mensaje de √©xito mostrado');

    // Paso 3: Simular acceso al enlace de reset (usando un token de prueba)
    console.log('üìù [QA Test Fixed] Paso 3: Simulando acceso al enlace de reset');
    const testToken = 'reset_' + btoa(JSON.stringify({ 
      email: TEST_EMAIL, 
      timestamp: Date.now() 
    }));
    
    await page.goto(`${BASE_URL}/reset-password/${testToken}`);
    await page.waitForLoadState('networkidle');
    
    // Verificar que la p√°gina de reset carg√≥
    await expect(page.locator('h1')).toContainText('Restablecer Contrase√±a');
    console.log('‚úÖ [QA Test Fixed] P√°gina de reset password cargada');

    // Paso 4: Usar el debugger para diagnosticar problemas (FIXED)
    console.log('üìù [QA Test Fixed] Paso 4: Ejecutando diagn√≥stico del sistema (FIXED)');
    const debugButton = page.locator('button:has-text("DIAGNOSTICAR RESET")');
    await debugButton.click();
    
    // Esperar resultado del diagn√≥stico
    await page.waitForTimeout(5000);
    
    // Capturar resultado del diagn√≥stico (FIXED - selector m√°s espec√≠fico)
    const debugResult = page.locator('.mt-4 .bg-black\\/20').last();
    const debugText = await debugResult.textContent();
    console.log('üîç [QA Test Fixed] Resultado del diagn√≥stico:', debugText);

    // Verificar que el diagn√≥stico ahora funciona correctamente
    if (debugText && debugText.includes('‚úÖ')) {
      console.log('‚úÖ [QA Test Fixed] Diagn√≥stico funcionando correctamente');
    } else if (debugText && debugText.includes('‚ùå')) {
      console.log('‚ö†Ô∏è [QA Test Fixed] Diagn√≥stico detect√≥ problemas:', debugText);
    }

    // Paso 5: Intentar cambiar la contrase√±a
    console.log('üìù [QA Test Fixed] Paso 5: Intentando cambiar contrase√±a');
    await page.fill('input[name="newPassword"]', NEW_PASSWORD);
    await page.fill('input[name="confirmPassword"]', NEW_PASSWORD);
    await page.click('button[type="submit"]');
    
    // Esperar respuesta
    await page.waitForTimeout(3000);
    
    // Verificar resultado
    const errorMessage = page.locator('.text-red-400');
    const successResetMessage = page.locator('text=¬°Contrase√±a Restablecida!');
    
    if (await successResetMessage.isVisible()) {
      console.log('‚úÖ [QA Test Fixed] Reset de contrase√±a exitoso');
    } else if (await errorMessage.isVisible()) {
      const errorText = await errorMessage.textContent();
      console.log('‚ö†Ô∏è [QA Test Fixed] Error en reset de contrase√±a:', errorText);
      // Esto es esperado porque el token es simulado
    }

    // Capturar screenshot final
    await page.screenshot({ path: 'reset-password-test-result-fixed.png', fullPage: true });
    console.log('üì∏ [QA Test Fixed] Screenshot capturado: reset-password-test-result-fixed.png');
  });

  test('Backend Connectivity Test', async ({ page }) => {
    console.log('üîç [QA Test Fixed] Iniciando test de conectividad del backend');
    
    // Navegar a la p√°gina de reset con un token v√°lido
    const testToken = 'reset_' + btoa(JSON.stringify({ 
      email: TEST_EMAIL, 
      timestamp: Date.now() 
    }));
    
    await page.goto(`${BASE_URL}/reset-password/${testToken}`);
    await page.waitForLoadState('networkidle');
    
    // Ejecutar diagn√≥stico
    const debugButton = page.locator('button:has-text("DIAGNOSTICAR RESET")');
    await debugButton.click();
    await page.waitForTimeout(5000);
    
    // Verificar que el diagn√≥stico muestra conectividad correcta
    const debugResult = page.locator('.mt-4 .bg-black\\/20').last();
    const debugText = await debugResult.textContent();
    
    console.log('üîç [QA Test Fixed] Resultado del diagn√≥stico de conectividad:', debugText);
    
    // El diagn√≥stico deber√≠a mostrar que el backend est√° funcionando
    if (debugText && debugText.includes('Backend responde con error')) {
      console.log('‚ö†Ô∏è [QA Test Fixed] Backend responde pero con error - esto es normal para credenciales de prueba');
    } else if (debugText && debugText.includes('‚úÖ')) {
      console.log('‚úÖ [QA Test Fixed] Backend funcionando correctamente');
    } else {
      console.log('‚ùå [QA Test Fixed] Problema inesperado en el diagn√≥stico');
    }
  });

  test('Token Validation Test', async ({ page }) => {
    console.log('üîç [QA Test Fixed] Iniciando test de validaci√≥n de tokens');
    
    // Test con token v√°lido
    const validToken = 'reset_' + btoa(JSON.stringify({ 
      email: TEST_EMAIL, 
      timestamp: Date.now() 
    }));
    
    await page.goto(`${BASE_URL}/reset-password/${validToken}`);
    await page.waitForLoadState('networkidle');
    
    // Verificar que se carga la p√°gina de reset
    await expect(page.locator('h1')).toContainText('Restablecer Contrase√±a');
    console.log('‚úÖ [QA Test Fixed] Token v√°lido aceptado correctamente');
    
    // Test con token inv√°lido
    await page.goto(`${BASE_URL}/reset-password/invalid_token_123`);
    await page.waitForLoadState('networkidle');
    
    // Verificar que se muestra error para token inv√°lido
    await expect(page.locator('h1')).toContainText('Token Inv√°lido');
    console.log('‚úÖ [QA Test Fixed] Token inv√°lido rechazado correctamente');
  });
});
